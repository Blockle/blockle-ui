import './blockle-blocks.css';
import { StyleProps } from './blocks';

const cache = new Map<string, string>();

function shorten(name: string, breakpointIndex: number) {
  const cachedItem = cache.get(name);

  if (cachedItem) {
    return cachedItem;
  }

  const parts: string[] = [];
  const matches = name.match(/(^[a-z])|([A-Z])|(-[a-z0-9])|([a-zA-Z0-9]$)/g);

  matches?.forEach((match) => {
    parts.push(match.replace('-', ''));
  });

  if (breakpointIndex !== 0) {
    parts.push(`${breakpointIndex}`);
  }

  const shortended = parts.join('');

  cache.set(name, shortended);

  return shortended;
}

export const useStyles = (styles: StyleProps) => {
  const keys = Object.keys(styles) as Array<keyof StyleProps>;
  const classList: string[] = [];

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    const value = styles[key];

    if (value === undefined) {
      continue;
    }

    if (Array.isArray(value)) {
      for (let j = 0; j < value.length; j++) {
        const val = value[j];

        classList.push(shorten(`${key}-${val}`, j));
      }
    } else {
      classList.push(shorten(`${key}-${value}`, 0));
    }
  }

  return classList.join(' ');
};
